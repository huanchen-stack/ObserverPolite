if task.Resp != nil {
		dbDoc.StatusCode = task.Resp.StatusCode
		dbDoc.RedirectChain = task.RedirectChain
		if len(dbDoc.RedirectChain) != 0 { // src -> dst change summary
			dst := dbDoc.RedirectChain[len(dbDoc.RedirectChain)-1]
			dstL := strings.Split(dst, " ")
			dstURL := dstL[len(dstL)-1]
			dstParsed, err := url.Parse(dstURL)
			if err != nil {
				fmt.Println("do something") //TODO: fix this
			}
			oriParsed, err := url.Parse(dbDoc.URL)
			if err != nil {
				fmt.Println("do something") //TODO: fix this
			}
			dbDoc.ChangeSummary = append(dbDoc.ChangeSummary, oriParsed.Scheme != dstParsed.Scheme)
			dbDoc.ChangeSummary = append(dbDoc.ChangeSummary, oriParsed.Hostname() != dstParsed.Hostname())
			dbDoc.ChangeSummary = append(dbDoc.ChangeSummary, oriParsed.Path != dstParsed.Path)
			dbDoc.ChangeSummary = append(dbDoc.ChangeSummary, oriParsed.RawQuery != dstParsed.RawQuery)
		}
	}
	if task.Err != nil {
		dbDoc.Err = task.Err.Error()
	}
	if task.AutoRetryHTTPS != nil && task.AutoRetryHTTPS.Retried {
		dbDoc.Retried = task.AutoRetryHTTPS.Retried
		if task.AutoRetryHTTPS.Resp != nil {
			dbDoc.RetriedStatusCode = task.AutoRetryHTTPS.Resp.StatusCode
			dbDoc.RetriedRedirectChain = task.AutoRetryHTTPS.RedirectChain
		}
		if task.AutoRetryHTTPS.Err != nil {
			dbDoc.RetriedErr = (*task.AutoRetryHTTPS).Err.Error()
		}
	}